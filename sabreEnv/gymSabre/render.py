# Import required libraries
import dash
from dash import html, dcc, Input, Output
import plotly.graph_objects as go
import pandas as pd
import numpy as np

# Initialize the Dash application
app = dash.Dash(__name__)

# Dash layout
app.layout = html.Div([
    dcc.Graph(id='live-update-graph'),
    dcc.Interval(
        id='interval-component',
        interval=1000,  # in milliseconds
        n_intervals=0
    ),
    html.Button('Update', id='hidden-button', style={'display': 'none'})
])

df = pd.read_csv('sabreEnv/gymSabre/data/renderData.csv', delimiter=',')
def loadData(episode, step):
    '''
    Load csv data generated by GymSabre.
    '''
    global df
    stepData = df[(df['episode'] == 1) & (df['step'] == step)]
    return stepData

# Callback to update the graph
@app.callback(Output('live-update-graph', 'figure'),
              [Input('interval-component', 'n_intervals')])
def update_graph_live(n):
    print(n)
    # Update data
    data = loadData(1, n*10)

    # Create the Plotly figure
    fig = go.Figure()

    # Add server and client points
    for t in ['CDN', 'Client']:
        fig.add_trace(go.Scatter(x=data[data['type'] == t]['x'], 
                                 y=data[data['type'] == t]['y'], 
                                 mode='markers', 
                                 name=t))
        
    # Create lines
    client_data = data[data['type'] == 'Client']
    for i in range(len(client_data)):
        fig.add_trace(go.Scatter(x=[client_data.iloc[i]['x'], client_data.iloc[i]['x_target']],
                                 y=[client_data.iloc[i]['y'], client_data.iloc[i]['y_target']],
                                 mode='lines',
                                 line=dict(color='blue', width=1),
                                 showlegend=False))

    fig.update_xaxes(range=[0, 100])  # Replace with desired x-axis range
    fig.update_yaxes(range=[0, 100])  # Replace with desired y-axis range

    fig.update_layout(title='GymSabre Map',
                      xaxis_title='X Coordinate',
                      yaxis_title='Y Coordinate',
                      width=650,
                      height=650)

    return fig

def run_dash_app():
    app.run_server(debug=True)

# Run the app
if __name__ == '__main__':
    run_dash_app()

